// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package router

import (
	"math/big"
	"strings"

	"github.com/KasperLiu/gobcos/accounts/abi"
	"github.com/KasperLiu/gobcos/accounts/abi/bind"
	"github.com/KasperLiu/gobcos/common"
	"github.com/KasperLiu/gobcos/core/types"
	"github.com/KasperLiu/gobcos/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = common.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RouterABI is the input ABI used to generate the binding from.
const RouterABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"show\",\"outputs\":[{\"name\":\"dic\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"dicCreator\",\"outputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dic\",\"type\":\"address\"}],\"name\":\"insert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"insertAuto\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"

// RouterBin is the compiled bytecode used for deploying new contracts.
var RouterBin = ""

// DeployRouter deploys a new Ethereum contract, binding an instance of Router to it.
func DeployRouter(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.RawTransaction, *Router, error) {
	parsed, err := abi.JSON(strings.NewReader(RouterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RouterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Router{RouterCaller: RouterCaller{contract: contract}, RouterTransactor: RouterTransactor{contract: contract}, RouterFilterer: RouterFilterer{contract: contract}}, nil
}

// Router is an auto generated Go binding around an Ethereum contract.
type Router struct {
	RouterCaller     // Read-only binding to the contract
	RouterTransactor // Write-only binding to the contract
	RouterFilterer   // Log filterer for contract events
}

// RouterCaller is an auto generated read-only Go binding around an Ethereum contract.
type RouterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RouterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RouterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RouterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RouterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RouterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RouterSession struct {
	Contract     *Router           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RouterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RouterCallerSession struct {
	Contract *RouterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RouterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RouterTransactorSession struct {
	Contract     *RouterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RouterRaw is an auto generated low-level Go binding around an Ethereum contract.
type RouterRaw struct {
	Contract *Router // Generic contract binding to access the raw methods on
}

// RouterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RouterCallerRaw struct {
	Contract *RouterCaller // Generic read-only contract binding to access the raw methods on
}

// RouterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RouterTransactorRaw struct {
	Contract *RouterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRouter creates a new instance of Router, bound to a specific deployed contract.
func NewRouter(address common.Address, backend bind.ContractBackend) (*Router, error) {
	contract, err := bindRouter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Router{RouterCaller: RouterCaller{contract: contract}, RouterTransactor: RouterTransactor{contract: contract}, RouterFilterer: RouterFilterer{contract: contract}}, nil
}

// NewRouterCaller creates a new read-only instance of Router, bound to a specific deployed contract.
func NewRouterCaller(address common.Address, caller bind.ContractCaller) (*RouterCaller, error) {
	contract, err := bindRouter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RouterCaller{contract: contract}, nil
}

// NewRouterTransactor creates a new write-only instance of Router, bound to a specific deployed contract.
func NewRouterTransactor(address common.Address, transactor bind.ContractTransactor) (*RouterTransactor, error) {
	contract, err := bindRouter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RouterTransactor{contract: contract}, nil
}

// NewRouterFilterer creates a new log filterer instance of Router, bound to a specific deployed contract.
func NewRouterFilterer(address common.Address, filterer bind.ContractFilterer) (*RouterFilterer, error) {
	contract, err := bindRouter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RouterFilterer{contract: contract}, nil
}

// bindRouter binds a generic wrapper to an already deployed contract.
func bindRouter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RouterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Router *RouterRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Router.Contract.RouterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Router *RouterRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Router.Contract.RouterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Router *RouterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _Router.Contract.RouterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Router *RouterCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Router.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Router *RouterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Router.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Router *RouterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.RawTransaction, error) {
	return _Router.Contract.contract.Transact(opts, method, params...)
}

// Show is a free data retrieval call binding the contract method 0x287a61e4.
//
// Solidity: function show(address sender) constant returns(address dic)
func (_Router *RouterCaller) Show(opts *bind.CallOpts, sender common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Router.contract.Call(opts, out, "show", sender)
	return *ret0, err
}

// Show is a free data retrieval call binding the contract method 0x287a61e4.
//
// Solidity: function show(address sender) constant returns(address dic)
func (_Router *RouterSession) Show(sender common.Address) (common.Address, error) {
	return _Router.Contract.Show(&_Router.CallOpts, sender)
}

// Show is a free data retrieval call binding the contract method 0x287a61e4.
//
// Solidity: function show(address sender) constant returns(address dic)
func (_Router *RouterCallerSession) Show(sender common.Address) (common.Address, error) {
	return _Router.Contract.Show(&_Router.CallOpts, sender)
}

// DicCreator is a paid mutator transaction binding the contract method 0x849263d9.
//
// Solidity: function dicCreator() returns(address addr)
func (_Router *RouterTransactor) DicCreator(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Router.contract.Transact(opts, "dicCreator")
}

// DicCreator is a paid mutator transaction binding the contract method 0x849263d9.
//
// Solidity: function dicCreator() returns(address addr)
func (_Router *RouterSession) DicCreator() (*types.RawTransaction, error) {
	return _Router.Contract.DicCreator(&_Router.TransactOpts)
}

// DicCreator is a paid mutator transaction binding the contract method 0x849263d9.
//
// Solidity: function dicCreator() returns(address addr)
func (_Router *RouterTransactorSession) DicCreator() (*types.RawTransaction, error) {
	return _Router.Contract.DicCreator(&_Router.TransactOpts)
}

// Insert is a paid mutator transaction binding the contract method 0xbc902ad2.
//
// Solidity: function insert(address dic) returns()
func (_Router *RouterTransactor) Insert(opts *bind.TransactOpts, dic common.Address) (*types.RawTransaction, error) {
	return _Router.contract.Transact(opts, "insert", dic)
}

// Insert is a paid mutator transaction binding the contract method 0xbc902ad2.
//
// Solidity: function insert(address dic) returns()
func (_Router *RouterSession) Insert(dic common.Address) (*types.RawTransaction, error) {
	return _Router.Contract.Insert(&_Router.TransactOpts, dic)
}

// Insert is a paid mutator transaction binding the contract method 0xbc902ad2.
//
// Solidity: function insert(address dic) returns()
func (_Router *RouterTransactorSession) Insert(dic common.Address) (*types.RawTransaction, error) {
	return _Router.Contract.Insert(&_Router.TransactOpts, dic)
}

// InsertAuto is a paid mutator transaction binding the contract method 0xcc39c1fa.
//
// Solidity: function insertAuto() returns()
func (_Router *RouterTransactor) InsertAuto(opts *bind.TransactOpts) (*types.RawTransaction, error) {
	return _Router.contract.Transact(opts, "insertAuto")
}

// InsertAuto is a paid mutator transaction binding the contract method 0xcc39c1fa.
//
// Solidity: function insertAuto() returns()
func (_Router *RouterSession) InsertAuto() (*types.RawTransaction, error) {
	return _Router.Contract.InsertAuto(&_Router.TransactOpts)
}

// InsertAuto is a paid mutator transaction binding the contract method 0xcc39c1fa.
//
// Solidity: function insertAuto() returns()
func (_Router *RouterTransactorSession) InsertAuto() (*types.RawTransaction, error) {
	return _Router.Contract.InsertAuto(&_Router.TransactOpts)
}
